
"Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications."

Features - 
	Automatic bin packing
	Self-healing
	Horizontal scaling
	Service discovery and Load balancing

Components -
	Master Node - 		Provides a running environment for the control plane responsible for managing the state of 
						a Kubernetes cluster, and it is the brain behind all operations inside the cluster. 
						
		API Server - 		A central control plane component running on the master node, coordinates all 
							administrative tasks,  intercepts RESTful calls from users, the only master plane 
							component to talk to the etcd data store.
		
		Schedular - 		Assigns new objects, such as pods, to nodes; Resource Instantiation & Allcation Decision.
		
		Controller Managers - 		Control plane components on the master node running controllers to regulate 
									the state of the Kubernetes cluster. Controllers are watch-loops continuously 
									running and comparing the cluster's desired state with its current state.
									
									kube-controller-manager : runs controllers responsible to act when nodes become 
									unavailable, to ensure pod counts are as expected.
									
									cloud-controller-manager : manages storage volumes, load balancing and routing.
		etcd 
	
	
	Worker Node - 		Provides a running environment for client applications.
		
		Container Runtime - 		Ex - Docker, CRI-O...
									Container Runtime Interface (CRI), Ex - dockershim.
		
		kubelet - 		An agent running on each node and communicates with the control plane components from the 
						master node. It receives Pod definitions, primarily from the API server, and interacts with 
						the container runtime on the node to run containers associated with the Pod. It also 
						monitors the health of the Pod's running containers.
						A kubelet manages all Pods running in a Node.
						
		kube-proxy - 		The network agent which runs on each node, responsible for dynamic updates and maintenance 
							of all networking rules on the node. 
							It abstracts the details of Pods networking and forwards connection requests to Pods.
		
		Adds On - 		Ex - DNS, Logging..



Kubernete Object Types -
	
	Deployment - 	Deployment objects provide declarative updates to Pods and ReplicaSets.
	
	Pod - 			The smallest and simplest unit of deployment in Kubernetes, which represent an instance of the application.
					It is a logical collection of one or more containers, which - 
					- Are scheduled together on the same host with the Pod.
					- Share the same Network Namespace.
					- Have assecc to the same mounted external storage(volume).
	
	Labels - 		Are key-value pairs attached to Kubernetes objects (e.g. Pods, ReplicaSets). 
					Labels are used to organize and select a subset of objects, based on the requirements in place. 
					Many objects can have the same Label(s). Labels do not provide uniqueness to objects. 
					Controllers use Labels to logically group together decoupled objects, rather than using objects' names or IDs.

	Services -      Groups Pods to provide common access point for the the external world to the containerized applications.
					Service logically groups Pods and defines a policy to access them.




ReplicationController -	Is NOT recomended.
ReplicaSets - 			Is recomended in place of ReplicationController. ReplicaSets support both equality- and set-based selectors, 
						whereas ReplicationControllers only support equality-based Selectors. Currently, this is the only difference.
						
Namespaces -			If multiple users and teams use the same Kubernetes cluster we can partition the cluster into virtual 
						sub-clusters using Namespaces. The names of the resources/objects created inside a Namespace are unique, 
						but not across Namespaces in the cluster.						
						
		Defauls Namespaces -
			default           
			kube-public
			kube-system
			kube-node-lease


Liveness and Readiness Probes -     Implementing Liveness and Readiness Probes allows the kubelet to
                                    control the health of the application running inside a Pod's
                                    container and force a container restart of an unresponsive application.

    Liveness Probe -    Checks on an application's health, and if the health check fails, kubelet
                        restarts the affected container automatically.

                        Liveness Probes can be set by defining:

                            Liveness command :

                                        apiVersion: v1
                                        kind: Pod
                                        metadata:
                                          labels:
                                            test: liveness
                                          name: liveness-exec
                                        spec:
                                          containers:
                                          - name: liveness
                                            image: k8s.gcr.io/busybox
                                            args:
                                            - /bin/sh
                                            - -c
                                            - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600
                                            livenessProbe:
                                              exec:
                                                command:
                                                - cat
                                                - /tmp/healthy
                                              initialDelaySeconds: 5
                                              periodSeconds: 5

                            Liveness HTTP request :

                                        # Inside "spec"
                                        livenessProbe:
                                              httpGet:
                                                path: /healthz
                                                port: 8080
                                                httpHeaders:
                                                - name: X-Custom-Header
                                                  value: Awesome
                                              initialDelaySeconds: 3
                                              periodSeconds: 3

                            TCP Liveness Probe :

                                        livenessProbe:
                                              tcpSocket:
                                                port: 8080
                                              initialDelaySeconds: 15
                                              periodSeconds: 20

    Readiness Probes :  Sometimes, applications have to meet certain conditions before they can
                        serve traffic. These conditions include ensuring that the depending service
                        is ready, or acknowledging that a large dataset needs to be loaded, etc.

                        readinessProbe:
                          exec:
                            command:
                            - cat
                            - /tmp/healthy
                          initialDelaySeconds: 5
                          periodSeconds: 5

                        A Pod with containers that do not report ready status will not receive traffic
                        from Kubernetes Services


Service Accounts (No User In Kubernetes)
Attribute-Based Access Control (ABAC)
Role-Based Access Control (RBAC)


	